using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CarJournal.Migrations
{
    /// <inheritdoc />
    public partial class AddAutoincrementInAllTables : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: -1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 220, 110, 177, 35, 134, 177, 50, 135, 221, 96, 24, 227, 135, 252, 153, 61, 74, 205, 227, 155, 245, 217, 83, 156, 204, 54, 235, 203, 79, 17, 138, 50, 102, 130, 234, 129, 119, 213, 101, 124, 231, 192, 9, 4, 117, 36, 185, 114, 19, 74, 98, 211, 37, 147, 19, 97, 242, 120, 127, 84, 178, 120, 181, 163 }, new byte[] { 54, 72, 209, 146, 142, 239, 211, 176, 18, 120, 11, 178, 133, 145, 39, 157, 83, 7, 232, 4, 109, 66, 56, 144, 23, 1, 128, 137, 124, 198, 72, 137, 131, 171, 88, 178, 184, 110, 113, 69, 166, 129, 225, 255, 69, 242, 164, 55, 176, 154, 153, 95, 211, 130, 201, 50, 57, 97, 135, 119, 136, 203, 193, 113, 208, 4, 12, 165, 144, 115, 135, 98, 1, 181, 19, 99, 246, 205, 213, 42, 171, 39, 85, 247, 242, 230, 134, 13, 78, 153, 212, 252, 228, 245, 99, 254, 126, 192, 202, 136, 197, 22, 76, 211, 122, 41, 56, 133, 162, 2, 211, 92, 64, 25, 67, 199, 123, 59, 107, 29, 178, 48, 235, 19, 134, 142, 143, 102 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: -1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 238, 223, 148, 71, 13, 120, 170, 245, 31, 156, 9, 45, 71, 39, 57, 255, 59, 243, 236, 240, 45, 65, 142, 20, 227, 79, 58, 56, 54, 40, 10, 107, 166, 196, 232, 204, 139, 65, 64, 133, 148, 183, 178, 174, 117, 237, 115, 201, 216, 135, 199, 132, 122, 116, 38, 60, 40, 44, 128, 139, 29, 200, 83, 20 }, new byte[] { 65, 129, 205, 114, 9, 116, 53, 122, 231, 46, 38, 22, 242, 249, 63, 221, 42, 217, 173, 187, 245, 231, 222, 69, 121, 85, 187, 230, 136, 0, 149, 112, 93, 235, 223, 144, 202, 197, 88, 110, 198, 229, 99, 110, 110, 13, 64, 8, 49, 179, 154, 186, 64, 88, 174, 136, 148, 112, 116, 205, 202, 54, 107, 219, 233, 23, 104, 223, 197, 235, 77, 19, 253, 21, 232, 14, 48, 41, 11, 109, 155, 105, 172, 127, 141, 24, 170, 7, 193, 189, 190, 179, 190, 109, 183, 139, 134, 234, 231, 42, 210, 5, 225, 68, 196, 201, 171, 146, 223, 38, 210, 66, 61, 157, 115, 49, 34, 81, 121, 118, 245, 158, 161, 36, 227, 96, 97, 215 } });
        }
    }
}
