// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarJournal.Migrations
{
    [DbContext(typeof(CarJournalDbContext))]
    [Migration("20240908123008_addVendorTable")]
    partial class addVendorTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarJournal.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "admin",
                            PasswordHash = new byte[] { 222, 123, 90, 92, 5, 60, 38, 5, 22, 252, 251, 49, 75, 2, 201, 222, 157, 194, 94, 121, 112, 170, 87, 234, 163, 218, 79, 33, 153, 85, 107, 177, 192, 236, 242, 154, 54, 209, 208, 247, 198, 166, 140, 15, 167, 15, 5, 235, 142, 208, 172, 228, 159, 107, 161, 166, 211, 34, 245, 77, 36, 147, 162, 120 },
                            PasswordSalt = new byte[] { 122, 19, 74, 63, 196, 181, 182, 254, 34, 121, 216, 218, 14, 63, 127, 183, 103, 59, 44, 251, 3, 69, 232, 40, 154, 250, 80, 147, 169, 249, 113, 235, 70, 160, 97, 107, 164, 50, 148, 74, 37, 168, 177, 251, 27, 66, 112, 242, 114, 75, 241, 177, 131, 221, 254, 175, 70, 209, 8, 38, 154, 135, 1, 103, 62, 11, 139, 246, 122, 174, 3, 114, 249, 45, 11, 141, 52, 173, 73, 37, 21, 29, 222, 232, 208, 73, 73, 62, 11, 229, 68, 40, 22, 254, 51, 50, 188, 187, 104, 2, 132, 41, 165, 155, 152, 47, 141, 83, 18, 175, 7, 182, 233, 121, 149, 89, 223, 125, 246, 155, 59, 77, 140, 190, 109, 93, 122, 214 },
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("CarJournal.Domain.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Vendors", (string)null);
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user"
                        },
                        new
                        {
                            Id = 2,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("CarJournal.Domain.User", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
